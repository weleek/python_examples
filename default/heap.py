#-*- coding: utf-8 -*-

# Heap 자료구조
# 전제 조건
# 1. 힙은 하나의 노드가 최대 2개의 자식 노드를 가지며 마지막 레벨을 제외한 모든 노드가 빈 공간이 없는 트리 구조이다.(완전 이진 탐색 트리 구조)
# 2. 모든 노드는 각자의 자식 노드의 값 보다 크거나 같은 경우 최대 힙 이라 한다.
# 3. 모든 노드는 각자의 자식 노드의 값 보다 작거나 같은 경우 최소 힙 이라 한다.
# 4. 힙은 최소 또는 최대 힙이어야 한다.

# 구현 함수
# 1. heapify : 전제조건 4를 만족하기 위해 노드끼리 비교
#   - 시간복잡도는 값을 비교하기 위해 배열에 접근 하였을 경우 인덱스로 접근하기에 O(1)이며 해당 노드만큼 개수가 추가 되기에 결과적으로 O(log n) 이다.
#   - 비교 해야 하는 노드 개수 만큼 돌며 값을 비교하기 위한 배열에 접근시에는 인덱스로 바로 접근하기에 for 는 1번 사용됩니다.
# 2. left_child : 1의 조건을 수행 하기 위한 왼쪽 자식 노드 인덱스 반환
# 3. right_child : 1의 조건을 수행 하기 위한 오른쪽 자식 노드 인덱스 반환
# 4. parent : 1의 조건을 수행 하기 위한 부모 노드 인덱스 반환
# 5. swap : 1의 조건을 수행 하기 위한 노드와 노드의 요소를 변경
# 6. insert : 요소 삽입
# 7. delete : 요소 삭제
# 8. printHeap : 현재 배열의 모든 요소 출력

class heap:
    def __init__(self):
        print('heap class init call')



if __name__ == '__main__':
    h = heap()
